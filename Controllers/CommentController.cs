using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Identity;
using GreTutor.Models;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using GreTutor.Data;
using Microsoft.AspNetCore.Authorization;

namespace GreTutor.Controllers
{
    [Authorize]
    public class CommentController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly UserManager<IdentityUser> _userManager;

        public CommentController(ApplicationDbContext context, UserManager<IdentityUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }
        public async Task<IActionResult> Index(int blogId)
        {
            if (blogId <= 0) return BadRequest("BlogId kh√¥ng h·ª£p l·ªá.");

            var comments = await _context.Comments
                .Where(c => c.BlogId == blogId)
                .Include(c => c.User!) // N·∫øu `User` b·ªã null, ki·ªÉm tra FK
                .OrderByDescending(c => c.Created)
                .ToListAsync();

            return View(comments);
        }


        [HttpPost]
        public async Task<IActionResult> Create(int blogId, string content)
        {
            if (string.IsNullOrWhiteSpace(content))
            {
                return BadRequest("N·ªôi dung b√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }

            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return Unauthorized();
            }

            var comment = new Comment
            {
                Content = content,
                Created = DateTime.Now,
                AuthorId = user.Id,
                BlogId = blogId
            };

            _context.Comments.Add(comment);
            await _context.SaveChangesAsync(); // üî• L∆∞u v√†o database

            return RedirectToAction("Details", "Blog", new { id = blogId });
        }


        [HttpPost]
        public IActionResult Delete(int commentId, int blogId)
        {
            var comment = _context.Comments
                .Include(c => c.User) // L·∫•y th√¥ng tin ng∆∞·ªùi ƒëƒÉng
                .FirstOrDefault(c => c.CommentId == commentId);

            if (comment == null)
            {
                return NotFound();
            }

            // Ch·ªâ cho ph√©p x√≥a n·∫øu l√† t√°c gi·∫£ ho·∫∑c admin
            if (User.Identity.Name == comment.User?.UserName || User.IsInRole("Admin"))
            {
                _context.Comments.Remove(comment);
                _context.SaveChanges();
            }

            return RedirectToAction("Details", "Blog", new { id = blogId });
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int CommentId, string Content)
        {
            var comment = await _context.Comments.FindAsync(CommentId);
            if (comment == null)
            {
                return NotFound();
            }

            // L·∫•y ID c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
            var currentUserId = _userManager.GetUserId(User);

            // Ki·ªÉm tra quy·ªÅn ch·ªânh s·ª≠a: ch·ªâ cho ph√©p ng∆∞·ªùi t·∫°o ho·∫∑c admin ch·ªânh s·ª≠a
            if (comment.AuthorId != currentUserId && !User.IsInRole("Admin"))
            {
                return Forbid(); // Tr·∫£ v·ªÅ l·ªói 403 n·∫øu kh√¥ng c√≥ quy·ªÅn
            }

            // C·∫≠p nh·∫≠t n·ªôi dung b√¨nh lu·∫≠n
            comment.Content = Content;
            comment.Created = DateTime.Now; // C√≥ th·ªÉ c·∫≠p nh·∫≠t th·ªùi gian ch·ªânh s·ª≠a n·∫øu c·∫ßn

            await _context.SaveChangesAsync();

            // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang chi ti·∫øt b√†i vi·∫øt ch·ª©a b√¨nh lu·∫≠n
            return RedirectToAction("Details", "Blog", new { id = comment.BlogId });
        }



    }
}
