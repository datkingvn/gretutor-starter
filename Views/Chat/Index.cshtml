@model List<GreTutor.Models.Entities.ChatMessage>
@{
    ViewData["Title"] = "Chat Box";
    var classId = ViewBag.ClassId;
    var currentUserId = ViewBag.CurrentUserId;
}
<!-- Page Banner Start -->
@await Html.PartialAsync("_PageBannerStart")
<!-- Page Banner End -->

<h2 class="text-center">Classroom Chat</h2>

<div id="chatContainer">
    <div id="chatBox">
        @foreach (var message in Model)
        {
            var isMine = message.SenderId == currentUserId;
            <div class="message @(isMine ? "my-message" : "other-message")">
                <b>@(message.Sender?.UserName ?? "Unknown"):</b> @message.Message
                <span class="time">@message.SentAt.ToString("HH:mm")</span>
            </div>
        }
    </div>
    <div id="inputContainer">
        <input type="text" id="messageInput" placeholder="Enter message..." />
        <button id="sendBtn" onclick="sendMessage()">Send</button>
    </div>
</div>

<div class="container d-flex justify-content-center flex-column align-items-center">
    <a href="@Url.Action("Index", "Classroom")" class="btn btn-success mt-3">Back to Classroom</a>
</div>

<script src="https://cdn.jsdelivr.net/npm/emoji-button@4.6.2/dist/index.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    const classId = @ViewBag.ClassId;
    const currentUserId = "@ViewBag.CurrentUserId";

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.start().then(() => {
        connection.invoke("JoinClassChat", classId).catch(err => console.error(err));
    });

    connection.on("ReceiveMessage", (data) => {
        appendMessage(data);
    });

    function appendMessage(data) {
        if (!data || !data.SenderId || !data.Message) {
            console.error("Dữ liệu tin nhắn bị lỗi:", data);
            return;
        }

        const chatBox = document.getElementById("chatBox");
        const messageDiv = document.createElement("div");

        const isMine = data.SenderId.toString() === currentUserId.toString();

        messageDiv.innerHTML = `<b>${data.SenderName}:</b> ${data.Message} <span class="time">${data.SentAt}</span>`;
        messageDiv.classList.add("message", isMine ? "my-message" : "other-message");

        chatBox.appendChild(messageDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const message = messageInput.value.trim();
        if (!message) return;

        connection.invoke("SendMessage", classId, message)
            .then(() => {
                appendMessage({
                    SenderId: currentUserId,
                    SenderName: "Bạn",
                    Message: message,
                    SentAt: new Date().toLocaleTimeString("vi-VN", { hour: "2-digit", minute: "2-digit" })
                });
                messageInput.value = "";
            })
            .catch(err => console.error(err));
    }
</script>


<style>
    #chatContainer {
        width: 600px;
        margin: 0 auto;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
    }

    #chatBox {
        height: 500px;
        overflow-y: auto;
        padding: 10px;
        display: flex;
        flex-direction: column;
    }

    .message {
        padding: 12px;
        margin: 8px;
        border-radius: 10px;
        max-width: 70%;
        font-size: 16px;
    }

    .my-message {
        align-self: flex-end;
        background: #0a519c;
        color: white;
    }

    .other-message {
        align-self: flex-start;
        background: #f1f1f1;
    }

    .time {
        font-size: 12px;
        color: rgb(9, 1, 1);
        margin-left: 10px;
    }

    #inputContainer {
        display: flex;
        align-items: center;
        padding: 10px;
        border-top: 1px solid #ccc;
        background: white;
    }

    #messageInput {
        flex: 1;
        padding: 8px;
        font-size: 16px;
    }

    #sendBtn {
        margin-left: 10px;
        padding: 8px 15px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    #sendBtn:hover {
        background: #0056b3;
    }

    #chatBox {
        background: linear-gradient(to bottom, #771010, #f0f0f0);
        padding: 10px;
        border-radius: 8px;
    }
</style>
