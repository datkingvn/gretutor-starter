@model List<GreTutor.Models.Entities.ChatMessage>
@{
    ViewData["Title"] = "Chat Box";
    var classId = ViewBag.ClassId;
    var currentUserId = ViewBag.CurrentUserId;
}
<div class="section section-padding">
    <div class="container">
        <div class="container chat-container">
            <div class="chat-wrapper">
                <h2 class="chat-title"><i class="fas fa-comments"></i> Classroom Chat</h2>

                <div class="chat-messages-container" id="chatBox">
                    @foreach (var message in Model)
                    {
                        var isMine = message.SenderId == currentUserId;
                        <div class="message @(isMine ? "my-message" : "other-message")">
                            <div class="message-header">
                                <strong>@(message.Sender?.UserName ?? "Unknown")</strong>
                                <span class="message-time">@message.SentAt.ToString("HH:mm")</span>
                            </div>
                            <p class="message-content">@message.Message</p>
                        </div>
                    }
                </div>

                <div class="message-input-container">
                    <textarea id="messageInput" placeholder="Type your message..." rows="3"
                        class="message-input"></textarea>
                    <div class="message-actions">
                        <button id="cancelBtn" class="btn btn-secondary">Cancel</button>
                        <button id="sendBtn" class="btn btn-primary">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- SignalR and Chat Logic Script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    // Remove 'position: absolute;' by setting it to 'static' (default position)
    var headerSection = document.querySelector('.header-section');
    if (headerSection) {
        headerSection.style.setProperty('position', 'static', 'important'); // Use 'important' to override other styles
    }

    // Enhanced Chat Logic
    class ClassroomChat {
        constructor(classId, currentUserId) {
            this.classId = classId;
            this.currentUserId = currentUserId;
            this.chatBox = document.getElementById('chatBox');
            this.messageInput = document.getElementById('messageInput');
            this.sendBtn = document.getElementById('sendBtn');
            this.cancelBtn = document.getElementById('cancelBtn');

            this.connection = null;
            this.initializeConnection();
            this.bindEvents();
        }

        initializeConnection() {
            this.connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .withAutomaticReconnect()
                .build();

            this.connection.start()
                .then(() => {
                    console.log('Connected to SignalR hub');
                    this.joinClassChat();
                })
                .catch(err => this.handleConnectionError(err));

            this.setupMessageListener();
        }

        joinClassChat() {
            this.connection.invoke("JoinClassChat", this.classId)
                .catch(err => this.handleConnectionError(err));
        }

        setupMessageListener() {
            this.connection.on("ReceiveMessage", (data) => {
                this.appendMessage(data);
            });
        }

        bindEvents() {
            this.sendBtn.addEventListener('click', () => this.sendMessage());
            this.cancelBtn.addEventListener('click', () => this.clearMessage());
            this.messageInput.addEventListener('keydown', (event) => {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    this.sendMessage();
                }
            });
        }

        sendMessage() {
            const message = this.messageInput.value.trim();
            if (!message) {
                this.flashInputError();
                return;
            }

            this.connection.invoke("SendMessage", this.classId, message)
                .then(() => {
                    this.appendLocalMessage(message);
                    this.clearMessage();
                })
                .catch(err => this.handleConnectionError(err));
        }

        appendLocalMessage(message) {
            const messageData = {
                SenderId: this.currentUserId,
                SenderName: 'You',
                Message: message,
                SentAt: new Date().toISOString()
            };
            this.appendMessage(messageData);
        }

        appendMessage(data) {
            if (!this.validateMessageData(data)) {
                console.error('Invalid message data', data);
                return;
            }

            const messageDiv = document.createElement('div');
            const isMine = data.SenderId.toString() === this.currentUserId.toString();

            messageDiv.classList.add(
                'message',
                isMine ? 'my-message' : 'other-message'
            );

            messageDiv.innerHTML = `
                <div class="message-header">
                    <strong>${this.sanitizeHTML(data.SenderName)}</strong>
                    <span class="message-time">${this.formatTime(data.SentAt)}</span>
                </div>
                <p class="message-content">${this.sanitizeHTML(data.Message)}</p>
            `;

            this.chatBox.appendChild(messageDiv);
            this.scrollToBottom();
        }

        validateMessageData(data) {
            return data
                && data.SenderId
                && data.Message
                && data.SenderName;
        }

        sanitizeHTML(str) {
            const temp = document.createElement('div');
            temp.textContent = str;
            return temp.innerHTML;
        }

        formatTime(dateString) {
            return new Date(dateString).toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        scrollToBottom() {
            this.chatBox.scrollTop = this.chatBox.scrollHeight;
        }

        clearMessage() {
            this.messageInput.value = '';
        }

        flashInputError() {
            this.messageInput.classList.add('error');
            setTimeout(() => {
                this.messageInput.classList.remove('error');
            }, 500);
        }

        handleConnectionError(err) {
            console.error('SignalR connection error:', err);
            alert('Unable to connect to chat. Please check your connection.');
        }

    }

    // Initialize chat when document is ready
    document.addEventListener('DOMContentLoaded', () => {
        const classId = @ViewBag.ClassId;
        const currentUserId = "@ViewBag.CurrentUserId";

        window.classroomChat = new ClassroomChat(classId, currentUserId);
    });

    document.getElementById('cancelBtn').addEventListener('click', function () {
        window.location.href = '@Url.Action("Index", "Classroom")';
    });

</script>

<style>
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        background-color: #f5f5f5;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .chat-wrapper {
        display: flex;
        flex-direction: column;
        height: 600px;
    }

    .chat-title {
        text-align: center;
        padding: 15px;
        background-color: #2c3e50;
        color: white;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .chat-messages-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 15px;
        background-color: white;
    }

    .message {
        margin-bottom: 15px;
        padding: 10px;
        border-radius: 8px;
        max-width: 80%;
        clear: both;
    }

    .my-message {
        background-color: #3498db;
        color: white;
        align-self: flex-end;
        margin-left: auto;
    }

    .other-message {
        background-color: #ecf0f1;
        color: #2c3e50;
        align-self: flex-start;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
        font-size: 0.8em;
    }

    .message-time {
        color: rgba(0, 0, 0, 0.5);
    }

    .message-input-container {
        padding: 15px;
        background-color: #f5f5f5;
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
    }

    .message-input {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        resize: none;
    }

    .message-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .error {
        border-color: red;
        animation: shake 0.5s;
    }
</style>